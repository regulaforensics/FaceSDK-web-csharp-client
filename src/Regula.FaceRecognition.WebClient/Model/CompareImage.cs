/* 
 * Regula Face Recognition Web API
 *
 * Regula Face Recognition Web API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.FaceRecognition.WebClient.Client.OpenAPIDateConverter;

namespace Regula.FaceRecognition.WebClient.Model
{
    /// <summary>
    /// CompareImage
    /// </summary>
    [DataContract]
    public partial class CompareImage :  IEquatable<CompareImage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompareImage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompareImage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompareImage" /> class.
        /// </summary>
        /// <param name="index">Image index used to identify input photos between themselves. If not specified, than input list index is used.</param>
        /// <param name="type">type.</param>
        /// <param name="data">Base64 encoded image (required).</param>
        public CompareImage(int index = default(int), int type = default(int), byte[] data = default(byte[]))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for CompareImage and cannot be null");
            }
            else
            {
                this.Data = data;
            }
            
            this.Index = index;
            this.Type = type;
        }
        
        /// <summary>
        /// Image index used to identify input photos between themselves. If not specified, than input list index is used
        /// </summary>
        /// <value>Image index used to identify input photos between themselves. If not specified, than input list index is used</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int Index { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int Type { get; set; }

        /// <summary>
        /// Base64 encoded image
        /// </summary>
        /// <value>Base64 encoded image</value>
        [DataMember(Name="data", EmitDefaultValue=true)]
        public byte[] Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompareImage {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompareImage);
        }

        /// <summary>
        /// Returns true if CompareImage instances are equal
        /// </summary>
        /// <param name="input">Instance of CompareImage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompareImage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
