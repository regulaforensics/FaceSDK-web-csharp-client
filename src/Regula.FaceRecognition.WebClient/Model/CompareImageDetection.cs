/* 
 * Regula Face Recognition Web API
 *
 * Regula Face Recognition Web API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.FaceRecognition.WebClient.Client.OpenAPIDateConverter;

namespace Regula.FaceRecognition.WebClient.Model
{
    /// <summary>
    /// CompareImageDetection
    /// </summary>
    [DataContract]
    public partial class CompareImageDetection :  IEquatable<CompareImageDetection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompareImageDetection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompareImageDetection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompareImageDetection" /> class.
        /// </summary>
        /// <param name="faces">faces.</param>
        /// <param name="imageIndex">Image index used to identify input photos between themselves. If not specified, than input list index is used (required).</param>
        /// <param name="status">status (required).</param>
        public CompareImageDetection(List<DetectionFace> faces = default(List<DetectionFace>), int imageIndex = default(int), int status = default(int))
        {
            // to ensure "imageIndex" is required (not null)
            if (imageIndex == null)
            {
                throw new InvalidDataException("imageIndex is a required property for CompareImageDetection and cannot be null");
            }
            else
            {
                this.ImageIndex = imageIndex;
            }
            
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for CompareImageDetection and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            
            this.Faces = faces;
        }
        
        /// <summary>
        /// Gets or Sets Faces
        /// </summary>
        [DataMember(Name="faces", EmitDefaultValue=false)]
        public List<DetectionFace> Faces { get; set; }

        /// <summary>
        /// Image index used to identify input photos between themselves. If not specified, than input list index is used
        /// </summary>
        /// <value>Image index used to identify input photos between themselves. If not specified, than input list index is used</value>
        [DataMember(Name="imageIndex", EmitDefaultValue=true)]
        public int ImageIndex { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public int Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompareImageDetection {\n");
            sb.Append("  Faces: ").Append(Faces).Append("\n");
            sb.Append("  ImageIndex: ").Append(ImageIndex).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompareImageDetection);
        }

        /// <summary>
        /// Returns true if CompareImageDetection instances are equal
        /// </summary>
        /// <param name="input">Instance of CompareImageDetection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompareImageDetection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Faces == input.Faces ||
                    this.Faces != null &&
                    input.Faces != null &&
                    this.Faces.SequenceEqual(input.Faces)
                ) && 
                (
                    this.ImageIndex == input.ImageIndex ||
                    (this.ImageIndex != null &&
                    this.ImageIndex.Equals(input.ImageIndex))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Faces != null)
                    hashCode = hashCode * 59 + this.Faces.GetHashCode();
                if (this.ImageIndex != null)
                    hashCode = hashCode * 59 + this.ImageIndex.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
