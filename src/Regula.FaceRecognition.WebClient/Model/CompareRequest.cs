/* 
 * Regula Face Recognition Web API
 *
 * Regula Face Recognition Web API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.FaceRecognition.WebClient.Client.OpenAPIDateConverter;

namespace Regula.FaceRecognition.WebClient.Model
{
    /// <summary>
    /// CompareRequest
    /// </summary>
    [DataContract]
    public partial class CompareRequest :  IEquatable<CompareRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompareRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompareRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompareRequest" /> class.
        /// </summary>
        /// <param name="thumbnails">thumbnails (default to false).</param>
        /// <param name="images">images (required).</param>
        public CompareRequest(bool thumbnails = false, List<CompareImage> images = default(List<CompareImage>))
        {
            // to ensure "images" is required (not null)
            if (images == null)
            {
                throw new InvalidDataException("images is a required property for CompareRequest and cannot be null");
            }
            else
            {
                this.Images = images;
            }
            
            // use default value if no "thumbnails" provided
            if (thumbnails == null)
            {
                this.Thumbnails = false;
            }
            else
            {
                this.Thumbnails = thumbnails;
            }
        }
        
        /// <summary>
        /// Gets or Sets Thumbnails
        /// </summary>
        [DataMember(Name="thumbnails", EmitDefaultValue=false)]
        public bool Thumbnails { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name="images", EmitDefaultValue=true)]
        public List<CompareImage> Images { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompareRequest {\n");
            sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompareRequest);
        }

        /// <summary>
        /// Returns true if CompareRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CompareRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompareRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Thumbnails == input.Thumbnails ||
                    (this.Thumbnails != null &&
                    this.Thumbnails.Equals(input.Thumbnails))
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Thumbnails != null)
                    hashCode = hashCode * 59 + this.Thumbnails.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
