/*
 * Regula FaceSDK Web API
 *
 * Regula FaceSDK Web API # Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Regula.FaceSDK.WebClient.Client;
using Regula.FaceSDK.WebClient.Model;

namespace Regula.FaceSDK.WebClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>Group</returns>
        Group CreateGroup (GroupToCreate groupToCreate, string xRequestID = default(string));

        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> CreateGroupWithHttpInfo (GroupToCreate groupToCreate, string xRequestID = default(string));
        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns></returns>
        void DeleteGroup (Guid groupId, string xRequestID = default(string));

        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupWithHttpInfo (Guid groupId, string xRequestID = default(string));
        /// <summary>
        /// Get groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>GroupPage</returns>
        GroupPage GetAllGroups (int page, int size, string xRequestID = default(string));

        /// <summary>
        /// Get groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of GroupPage</returns>
        ApiResponse<GroupPage> GetAllGroupsWithHttpInfo (int page, int size, string xRequestID = default(string));
        /// <summary>
        /// Get group persons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>PersonsPage</returns>
        PersonsPage GetAllPersonsByGroupId (int page, int size, Guid groupId, string xRequestID = default(string));

        /// <summary>
        /// Get group persons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of PersonsPage</returns>
        ApiResponse<PersonsPage> GetAllPersonsByGroupIdWithHttpInfo (int page, int size, Guid groupId, string xRequestID = default(string));
        /// <summary>
        /// Get group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>Group</returns>
        Group GetGroup (Guid groupId, string xRequestID = default(string));

        /// <summary>
        /// Get group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> GetGroupWithHttpInfo (Guid groupId, string xRequestID = default(string));
        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns></returns>
        void UpdateGroup (Guid groupId, GroupToCreate groupToCreate, string xRequestID = default(string));

        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateGroupWithHttpInfo (Guid groupId, GroupToCreate groupToCreate, string xRequestID = default(string));
        /// <summary>
        /// Add/remove persons to group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns></returns>
        void UpdatePersonsInGroup (Guid groupId, UpdateGroup updateGroup, string xRequestID = default(string));

        /// <summary>
        /// Add/remove persons to group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePersonsInGroupWithHttpInfo (Guid groupId, UpdateGroup updateGroup, string xRequestID = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> CreateGroupAsync (GroupToCreate groupToCreate, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> CreateGroupWithHttpInfoAsync (GroupToCreate groupToCreate, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupAsync (Guid groupId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupWithHttpInfoAsync (Guid groupId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupPage</returns>
        System.Threading.Tasks.Task<GroupPage> GetAllGroupsAsync (int page, int size, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupPage>> GetAllGroupsWithHttpInfoAsync (int page, int size, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get group persons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PersonsPage</returns>
        System.Threading.Tasks.Task<PersonsPage> GetAllPersonsByGroupIdAsync (int page, int size, Guid groupId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get group persons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PersonsPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonsPage>> GetAllPersonsByGroupIdWithHttpInfoAsync (int page, int size, Guid groupId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> GetGroupAsync (Guid groupId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> GetGroupWithHttpInfoAsync (Guid groupId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateGroupAsync (Guid groupId, GroupToCreate groupToCreate, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGroupWithHttpInfoAsync (Guid groupId, GroupToCreate groupToCreate, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add/remove persons to group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePersonsInGroupAsync (Guid groupId, UpdateGroup updateGroup, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add/remove persons to group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePersonsInGroupWithHttpInfoAsync (Guid groupId, UpdateGroup updateGroup, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupApi : IGroupApi
    {
        private Regula.FaceSDK.WebClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupApi(String basePath)
        {
            this.Configuration = new Regula.FaceSDK.WebClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Regula.FaceSDK.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class
        /// </summary>
        /// <returns></returns>
        public GroupApi()
        {
            this.Configuration = Regula.FaceSDK.WebClient.Client.Configuration.Default;

            ExceptionFactory = Regula.FaceSDK.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupApi(Regula.FaceSDK.WebClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Regula.FaceSDK.WebClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Regula.FaceSDK.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Regula.FaceSDK.WebClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Regula.FaceSDK.WebClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>Group</returns>
        public virtual Group CreateGroup (GroupToCreate groupToCreate, string xRequestID = default(string))
        {
             ApiResponse<Group> localVarResponse = CreateGroupWithHttpInfo(groupToCreate, xRequestID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        public ApiResponse<Group> CreateGroupWithHttpInfo (GroupToCreate groupToCreate, string xRequestID = default(string))
        {
            // verify the required parameter 'groupToCreate' is set
            if (groupToCreate == null)
                throw new ApiException(400, "Missing required parameter 'groupToCreate' when calling GroupApi->CreateGroup");

            var localVarPath = "/api/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter
            if (groupToCreate != null && groupToCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupToCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupToCreate; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Group>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Group) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Group)));
        }

        /// <summary>
        /// Create group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> CreateGroupAsync (GroupToCreate groupToCreate, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Group> localVarResponse = await CreateGroupWithHttpInfoAsync(groupToCreate, xRequestID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Group>> CreateGroupWithHttpInfoAsync (GroupToCreate groupToCreate, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupToCreate' is set
            if (groupToCreate == null)
                throw new ApiException(400, "Missing required parameter 'groupToCreate' when calling GroupApi->CreateGroup");

            var localVarPath = "/api/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter
            if (groupToCreate != null && groupToCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupToCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupToCreate; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Group>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Group) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Group)));
        }

        /// <summary>
        /// Delete group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns></returns>
        public void DeleteGroup (Guid groupId, string xRequestID = default(string))
        {
             DeleteGroupWithHttpInfo(groupId, xRequestID);
        }

        /// <summary>
        /// Delete group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGroupWithHttpInfo (Guid groupId, string xRequestID = default(string))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupApi->DeleteGroup");

            var localVarPath = "/api/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupAsync (Guid groupId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteGroupWithHttpInfoAsync(groupId, xRequestID, cancellationToken);

        }

        /// <summary>
        /// Delete group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupWithHttpInfoAsync (Guid groupId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupApi->DeleteGroup");

            var localVarPath = "/api/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>GroupPage</returns>
        public GroupPage GetAllGroups (int page, int size, string xRequestID = default(string))
        {
             ApiResponse<GroupPage> localVarResponse = GetAllGroupsWithHttpInfo(page, size, xRequestID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of GroupPage</returns>
        public ApiResponse<GroupPage> GetAllGroupsWithHttpInfo (int page, int size, string xRequestID = default(string))
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling GroupApi->GetAllGroups");
            // verify the required parameter 'size' is set
            if (size == null)
                throw new ApiException(400, "Missing required parameter 'size' when calling GroupApi->GetAllGroups");

            var localVarPath = "/api/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupPage)));
        }

        /// <summary>
        /// Get groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupPage</returns>
        public async System.Threading.Tasks.Task<GroupPage> GetAllGroupsAsync (int page, int size, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GroupPage> localVarResponse = await GetAllGroupsWithHttpInfoAsync(page, size, xRequestID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupPage>> GetAllGroupsWithHttpInfoAsync (int page, int size, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling GroupApi->GetAllGroups");
            // verify the required parameter 'size' is set
            if (size == null)
                throw new ApiException(400, "Missing required parameter 'size' when calling GroupApi->GetAllGroups");

            var localVarPath = "/api/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupPage)));
        }

        /// <summary>
        /// Get group persons 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>PersonsPage</returns>
        public PersonsPage GetAllPersonsByGroupId (int page, int size, Guid groupId, string xRequestID = default(string))
        {
             ApiResponse<PersonsPage> localVarResponse = GetAllPersonsByGroupIdWithHttpInfo(page, size, groupId, xRequestID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group persons 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of PersonsPage</returns>
        public ApiResponse<PersonsPage> GetAllPersonsByGroupIdWithHttpInfo (int page, int size, Guid groupId, string xRequestID = default(string))
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling GroupApi->GetAllPersonsByGroupId");
            // verify the required parameter 'size' is set
            if (size == null)
                throw new ApiException(400, "Missing required parameter 'size' when calling GroupApi->GetAllPersonsByGroupId");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupApi->GetAllPersonsByGroupId");

            var localVarPath = "/api/groups/{groupId}/persons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllPersonsByGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonsPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonsPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonsPage)));
        }

        /// <summary>
        /// Get group persons 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PersonsPage</returns>
        public async System.Threading.Tasks.Task<PersonsPage> GetAllPersonsByGroupIdAsync (int page, int size, Guid groupId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PersonsPage> localVarResponse = await GetAllPersonsByGroupIdWithHttpInfoAsync(page, size, groupId, xRequestID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group persons 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PersonsPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonsPage>> GetAllPersonsByGroupIdWithHttpInfoAsync (int page, int size, Guid groupId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling GroupApi->GetAllPersonsByGroupId");
            // verify the required parameter 'size' is set
            if (size == null)
                throw new ApiException(400, "Missing required parameter 'size' when calling GroupApi->GetAllPersonsByGroupId");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupApi->GetAllPersonsByGroupId");

            var localVarPath = "/api/groups/{groupId}/persons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllPersonsByGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonsPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonsPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonsPage)));
        }

        /// <summary>
        /// Get group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>Group</returns>
        public Group GetGroup (Guid groupId, string xRequestID = default(string))
        {
             ApiResponse<Group> localVarResponse = GetGroupWithHttpInfo(groupId, xRequestID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        public ApiResponse<Group> GetGroupWithHttpInfo (Guid groupId, string xRequestID = default(string))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupApi->GetGroup");

            var localVarPath = "/api/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Group>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Group) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Group)));
        }

        /// <summary>
        /// Get group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> GetGroupAsync (Guid groupId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Group> localVarResponse = await GetGroupWithHttpInfoAsync(groupId, xRequestID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Group>> GetGroupWithHttpInfoAsync (Guid groupId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupApi->GetGroup");

            var localVarPath = "/api/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Group>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Group) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Group)));
        }

        /// <summary>
        /// Update group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns></returns>
        public void UpdateGroup (Guid groupId, GroupToCreate groupToCreate, string xRequestID = default(string))
        {
             UpdateGroupWithHttpInfo(groupId, groupToCreate, xRequestID);
        }

        /// <summary>
        /// Update group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateGroupWithHttpInfo (Guid groupId, GroupToCreate groupToCreate, string xRequestID = default(string))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupApi->UpdateGroup");
            // verify the required parameter 'groupToCreate' is set
            if (groupToCreate == null)
                throw new ApiException(400, "Missing required parameter 'groupToCreate' when calling GroupApi->UpdateGroup");

            var localVarPath = "/api/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter
            if (groupToCreate != null && groupToCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupToCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupToCreate; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateGroupAsync (Guid groupId, GroupToCreate groupToCreate, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateGroupWithHttpInfoAsync(groupId, groupToCreate, xRequestID, cancellationToken);

        }

        /// <summary>
        /// Update group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGroupWithHttpInfoAsync (Guid groupId, GroupToCreate groupToCreate, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupApi->UpdateGroup");
            // verify the required parameter 'groupToCreate' is set
            if (groupToCreate == null)
                throw new ApiException(400, "Missing required parameter 'groupToCreate' when calling GroupApi->UpdateGroup");

            var localVarPath = "/api/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter
            if (groupToCreate != null && groupToCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupToCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupToCreate; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add/remove persons to group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns></returns>
        public void UpdatePersonsInGroup (Guid groupId, UpdateGroup updateGroup, string xRequestID = default(string))
        {
             UpdatePersonsInGroupWithHttpInfo(groupId, updateGroup, xRequestID);
        }

        /// <summary>
        /// Add/remove persons to group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePersonsInGroupWithHttpInfo (Guid groupId, UpdateGroup updateGroup, string xRequestID = default(string))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupApi->UpdatePersonsInGroup");
            // verify the required parameter 'updateGroup' is set
            if (updateGroup == null)
                throw new ApiException(400, "Missing required parameter 'updateGroup' when calling GroupApi->UpdatePersonsInGroup");

            var localVarPath = "/api/groups/{groupId}/persons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter
            if (updateGroup != null && updateGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGroup; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePersonsInGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add/remove persons to group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePersonsInGroupAsync (Guid groupId, UpdateGroup updateGroup, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdatePersonsInGroupWithHttpInfoAsync(groupId, updateGroup, xRequestID, cancellationToken);

        }

        /// <summary>
        /// Add/remove persons to group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePersonsInGroupWithHttpInfoAsync (Guid groupId, UpdateGroup updateGroup, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling GroupApi->UpdatePersonsInGroup");
            // verify the required parameter 'updateGroup' is set
            if (updateGroup == null)
                throw new ApiException(400, "Missing required parameter 'updateGroup' when calling GroupApi->UpdatePersonsInGroup");

            var localVarPath = "/api/groups/{groupId}/persons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter
            if (updateGroup != null && updateGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGroup; // byte array
            }


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePersonsInGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
