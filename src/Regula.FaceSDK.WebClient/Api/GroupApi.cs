/*
 * Regula FaceSDK Web API
 *
 * [Download OpenAPI specification](https://github.com/regulaforensics/FaceSDK-web-openapi) ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Regula.FaceSDK.WebClient.Client;
using Regula.FaceSDK.WebClient.Model;

namespace Regula.FaceSDK.WebClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create group
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        Group CreateGroup(GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> CreateGroupWithHttpInfo(GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete group
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteGroup(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupWithHttpInfo(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get groups
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupPage</returns>
        GroupPage GetAllGroups(int page, int size, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupPage</returns>
        ApiResponse<GroupPage> GetAllGroupsWithHttpInfo(int page, int size, string? xRequestID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get group persons
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonsPage</returns>
        PersonsPage GetAllPersonsByGroupId(Guid groupId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get group persons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonsPage</returns>
        ApiResponse<PersonsPage> GetAllPersonsByGroupIdWithHttpInfo(Guid groupId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get group
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        Group GetGroup(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> GetGroupWithHttpInfo(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update group
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateGroup(Guid groupId, GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateGroupWithHttpInfo(Guid groupId, GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Add/remove persons to group
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdatePersonsInGroup(Guid groupId, UpdateGroup updateGroup, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Add/remove persons to group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePersonsInGroupWithHttpInfo(Guid groupId, UpdateGroup updateGroup, string? xRequestID = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> CreateGroupAsync(GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> CreateGroupWithHttpInfoAsync(GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupAsync(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupWithHttpInfoAsync(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupPage</returns>
        System.Threading.Tasks.Task<GroupPage> GetAllGroupsAsync(int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupPage>> GetAllGroupsWithHttpInfoAsync(int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get group persons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonsPage</returns>
        System.Threading.Tasks.Task<PersonsPage> GetAllPersonsByGroupIdAsync(Guid groupId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get group persons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonsPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonsPage>> GetAllPersonsByGroupIdWithHttpInfoAsync(Guid groupId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> GetGroupAsync(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> GetGroupWithHttpInfoAsync(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateGroupAsync(Guid groupId, GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGroupWithHttpInfoAsync(Guid groupId, GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add/remove persons to group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePersonsInGroupAsync(Guid groupId, UpdateGroup updateGroup, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add/remove persons to group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePersonsInGroupWithHttpInfoAsync(Guid groupId, UpdateGroup updateGroup, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApi : IGroupApiSync, IGroupApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupApi : IGroupApi
    {
        private Regula.FaceSDK.WebClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupApi(string basePath)
        {
            this.Configuration = Regula.FaceSDK.WebClient.Client.Configuration.MergeConfigurations(
                Regula.FaceSDK.WebClient.Client.GlobalConfiguration.Instance,
                new Regula.FaceSDK.WebClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Regula.FaceSDK.WebClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Regula.FaceSDK.WebClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Regula.FaceSDK.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupApi(Regula.FaceSDK.WebClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Regula.FaceSDK.WebClient.Client.Configuration.MergeConfigurations(
                Regula.FaceSDK.WebClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Regula.FaceSDK.WebClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Regula.FaceSDK.WebClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Regula.FaceSDK.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupApi(Regula.FaceSDK.WebClient.Client.ISynchronousClient client, Regula.FaceSDK.WebClient.Client.IAsynchronousClient asyncClient, Regula.FaceSDK.WebClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Regula.FaceSDK.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Regula.FaceSDK.WebClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Regula.FaceSDK.WebClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Regula.FaceSDK.WebClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Regula.FaceSDK.WebClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        public Group CreateGroup(GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<Group> localVarResponse = CreateGroupWithHttpInfo(groupToCreate, xRequestID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<Group> CreateGroupWithHttpInfo(GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'groupToCreate' is set
            if (groupToCreate == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'groupToCreate' when calling GroupApi->CreateGroup");
            }

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }
            localVarRequestOptions.Data = groupToCreate;

            localVarRequestOptions.Operation = "GroupApi.CreateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Group>("/api/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> CreateGroupAsync(GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<Group> localVarResponse = await CreateGroupWithHttpInfoAsync(groupToCreate, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupToCreate">Request body for the group to create.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<Group>> CreateGroupWithHttpInfoAsync(GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupToCreate' is set
            if (groupToCreate == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'groupToCreate' when calling GroupApi->CreateGroup");
            }


            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }
            localVarRequestOptions.Data = groupToCreate;

            localVarRequestOptions.Operation = "GroupApi.CreateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Group>("/api/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteGroup(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0)
        {
            DeleteGroupWithHttpInfo(groupId, xRequestID);
        }

        /// <summary>
        /// Delete group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<Object> DeleteGroupWithHttpInfo(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "GroupApi.DeleteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/groups/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupAsync(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteGroupWithHttpInfoAsync(groupId, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<Object>> DeleteGroupWithHttpInfoAsync(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "GroupApi.DeleteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupPage</returns>
        public GroupPage GetAllGroups(int page, int size, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<GroupPage> localVarResponse = GetAllGroupsWithHttpInfo(page, size, xRequestID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupPage</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<GroupPage> GetAllGroupsWithHttpInfo(int page, int size, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "GroupApi.GetAllGroups";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupPage>("/api/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupPage</returns>
        public async System.Threading.Tasks.Task<GroupPage> GetAllGroupsAsync(int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<GroupPage> localVarResponse = await GetAllGroupsWithHttpInfoAsync(page, size, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupPage)</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<GroupPage>> GetAllGroupsWithHttpInfoAsync(int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "GroupApi.GetAllGroups";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupPage>("/api/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get group persons 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonsPage</returns>
        public PersonsPage GetAllPersonsByGroupId(Guid groupId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<PersonsPage> localVarResponse = GetAllPersonsByGroupIdWithHttpInfo(groupId, page, size, xRequestID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get group persons 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonsPage</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<PersonsPage> GetAllPersonsByGroupIdWithHttpInfo(Guid groupId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "GroupApi.GetAllPersonsByGroupId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonsPage>("/api/groups/{groupId}/persons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPersonsByGroupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get group persons 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonsPage</returns>
        public async System.Threading.Tasks.Task<PersonsPage> GetAllPersonsByGroupIdAsync(Guid groupId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<PersonsPage> localVarResponse = await GetAllPersonsByGroupIdWithHttpInfoAsync(groupId, page, size, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get group persons 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonsPage)</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<PersonsPage>> GetAllPersonsByGroupIdWithHttpInfoAsync(Guid groupId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "GroupApi.GetAllPersonsByGroupId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonsPage>("/api/groups/{groupId}/persons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPersonsByGroupId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        public Group GetGroup(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<Group> localVarResponse = GetGroupWithHttpInfo(groupId, xRequestID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<Group> GetGroupWithHttpInfo(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "GroupApi.GetGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Group>("/api/groups/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> GetGroupAsync(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<Group> localVarResponse = await GetGroupWithHttpInfoAsync(groupId, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<Group>> GetGroupWithHttpInfoAsync(Guid groupId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "GroupApi.GetGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Group>("/api/groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateGroup(Guid groupId, GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0)
        {
            UpdateGroupWithHttpInfo(groupId, groupToCreate, xRequestID);
        }

        /// <summary>
        /// Update group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<Object> UpdateGroupWithHttpInfo(Guid groupId, GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'groupToCreate' is set
            if (groupToCreate == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'groupToCreate' when calling GroupApi->UpdateGroup");
            }

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }
            localVarRequestOptions.Data = groupToCreate;

            localVarRequestOptions.Operation = "GroupApi.UpdateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/groups/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateGroupAsync(Guid groupId, GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateGroupWithHttpInfoAsync(groupId, groupToCreate, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="groupToCreate">Request body for the group to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<Object>> UpdateGroupWithHttpInfoAsync(Guid groupId, GroupToCreate groupToCreate, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupToCreate' is set
            if (groupToCreate == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'groupToCreate' when calling GroupApi->UpdateGroup");
            }


            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }
            localVarRequestOptions.Data = groupToCreate;

            localVarRequestOptions.Operation = "GroupApi.UpdateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add/remove persons to group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdatePersonsInGroup(Guid groupId, UpdateGroup updateGroup, string? xRequestID = default(string?), int operationIndex = 0)
        {
            UpdatePersonsInGroupWithHttpInfo(groupId, updateGroup, xRequestID);
        }

        /// <summary>
        /// Add/remove persons to group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<Object> UpdatePersonsInGroupWithHttpInfo(Guid groupId, UpdateGroup updateGroup, string? xRequestID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'updateGroup' is set
            if (updateGroup == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'updateGroup' when calling GroupApi->UpdatePersonsInGroup");
            }

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }
            localVarRequestOptions.Data = updateGroup;

            localVarRequestOptions.Operation = "GroupApi.UpdatePersonsInGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/groups/{groupId}/persons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePersonsInGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add/remove persons to group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePersonsInGroupAsync(Guid groupId, UpdateGroup updateGroup, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdatePersonsInGroupWithHttpInfoAsync(groupId, updateGroup, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add/remove persons to group 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID.</param>
        /// <param name="updateGroup">Request body for person IDs to add or remove.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<Object>> UpdatePersonsInGroupWithHttpInfoAsync(Guid groupId, UpdateGroup updateGroup, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateGroup' is set
            if (updateGroup == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'updateGroup' when calling GroupApi->UpdatePersonsInGroup");
            }


            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }
            localVarRequestOptions.Data = updateGroup;

            localVarRequestOptions.Operation = "GroupApi.UpdatePersonsInGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/groups/{groupId}/persons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePersonsInGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
