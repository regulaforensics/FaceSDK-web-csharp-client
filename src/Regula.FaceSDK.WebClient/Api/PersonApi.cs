/*
 * Regula FaceSDK Web API
 *
 * [Download OpenAPI specification](https://github.com/regulaforensics/FaceSDK-web-openapi) ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Regula.FaceSDK.WebClient.Client;
using Regula.FaceSDK.WebClient.Model;

namespace Regula.FaceSDK.WebClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add person image
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Image</returns>
        Image AddImageToPerson(Guid personId, ImageFields imageFields, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Add person image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Image</returns>
        ApiResponse<Image> AddImageToPersonWithHttpInfo(Guid personId, ImageFields imageFields, string? xRequestID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create person
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Person</returns>
        Person CreatePerson(PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Person</returns>
        ApiResponse<Person> CreatePersonWithHttpInfo(PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete image of person
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteImageOfPerson(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete image of person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteImageOfPersonWithHttpInfo(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete person
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePerson(Guid personId, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Delete person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePersonWithHttpInfo(Guid personId, string? xRequestID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get person groups
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupPage</returns>
        GroupPage GetAllGroupsByPersonId(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get person groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupPage</returns>
        ApiResponse<GroupPage> GetAllGroupsByPersonIdWithHttpInfo(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get person images
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImagePage</returns>
        ImagePage GetAllImagesByPersonId(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get person images
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImagePage</returns>
        ApiResponse<ImagePage> GetAllImagesByPersonIdWithHttpInfo(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get person image by id
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetImageOfPerson(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get person image by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetImageOfPersonWithHttpInfo(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get person
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Person</returns>
        Person GetPerson(Guid personId, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Person</returns>
        ApiResponse<Person> GetPersonWithHttpInfo(Guid personId, string? xRequestID = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update person
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdatePerson(Guid personId, PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0);

        /// <summary>
        /// Update person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePersonWithHttpInfo(Guid personId, PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add person image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Image</returns>
        System.Threading.Tasks.Task<Image> AddImageToPersonAsync(Guid personId, ImageFields imageFields, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add person image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Image)</returns>
        System.Threading.Tasks.Task<ApiResponse<Image>> AddImageToPersonWithHttpInfoAsync(Guid personId, ImageFields imageFields, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        System.Threading.Tasks.Task<Person> CreatePersonAsync(PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        System.Threading.Tasks.Task<ApiResponse<Person>> CreatePersonWithHttpInfoAsync(PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete image of person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteImageOfPersonAsync(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete image of person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteImageOfPersonWithHttpInfoAsync(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePersonAsync(Guid personId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePersonWithHttpInfoAsync(Guid personId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get person groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupPage</returns>
        System.Threading.Tasks.Task<GroupPage> GetAllGroupsByPersonIdAsync(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get person groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupPage>> GetAllGroupsByPersonIdWithHttpInfoAsync(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get person images
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImagePage</returns>
        System.Threading.Tasks.Task<ImagePage> GetAllImagesByPersonIdAsync(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get person images
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImagePage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImagePage>> GetAllImagesByPersonIdWithHttpInfoAsync(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get person image by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetImageOfPersonAsync(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get person image by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetImageOfPersonWithHttpInfoAsync(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        System.Threading.Tasks.Task<Person> GetPersonAsync(Guid personId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        System.Threading.Tasks.Task<ApiResponse<Person>> GetPersonWithHttpInfoAsync(Guid personId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePersonAsync(Guid personId, PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePersonWithHttpInfoAsync(Guid personId, PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonApi : IPersonApiSync, IPersonApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PersonApi : IPersonApi
    {
        private Regula.FaceSDK.WebClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonApi(string basePath)
        {
            this.Configuration = Regula.FaceSDK.WebClient.Client.Configuration.MergeConfigurations(
                Regula.FaceSDK.WebClient.Client.GlobalConfiguration.Instance,
                new Regula.FaceSDK.WebClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Regula.FaceSDK.WebClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Regula.FaceSDK.WebClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Regula.FaceSDK.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersonApi(Regula.FaceSDK.WebClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Regula.FaceSDK.WebClient.Client.Configuration.MergeConfigurations(
                Regula.FaceSDK.WebClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Regula.FaceSDK.WebClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Regula.FaceSDK.WebClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Regula.FaceSDK.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PersonApi(Regula.FaceSDK.WebClient.Client.ISynchronousClient client, Regula.FaceSDK.WebClient.Client.IAsynchronousClient asyncClient, Regula.FaceSDK.WebClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Regula.FaceSDK.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Regula.FaceSDK.WebClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Regula.FaceSDK.WebClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Regula.FaceSDK.WebClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Regula.FaceSDK.WebClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add person image 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Image</returns>
        public Image AddImageToPerson(Guid personId, ImageFields imageFields, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<Image> localVarResponse = AddImageToPersonWithHttpInfo(personId, imageFields, xRequestID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add person image 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Image</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<Image> AddImageToPersonWithHttpInfo(Guid personId, ImageFields imageFields, string? xRequestID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'imageFields' is set
            if (imageFields == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'imageFields' when calling PersonApi->AddImageToPerson");
            }

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }
            localVarRequestOptions.Data = imageFields;

            localVarRequestOptions.Operation = "PersonApi.AddImageToPerson";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Image>("/api/persons/{personId}/images", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddImageToPerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add person image 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Image</returns>
        public async System.Threading.Tasks.Task<Image> AddImageToPersonAsync(Guid personId, ImageFields imageFields, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<Image> localVarResponse = await AddImageToPersonWithHttpInfoAsync(personId, imageFields, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add person image 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Image)</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<Image>> AddImageToPersonWithHttpInfoAsync(Guid personId, ImageFields imageFields, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'imageFields' is set
            if (imageFields == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'imageFields' when calling PersonApi->AddImageToPerson");
            }


            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }
            localVarRequestOptions.Data = imageFields;

            localVarRequestOptions.Operation = "PersonApi.AddImageToPerson";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Image>("/api/persons/{personId}/images", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddImageToPerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Person</returns>
        public Person CreatePerson(PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<Person> localVarResponse = CreatePersonWithHttpInfo(personFields, xRequestID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Person</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<Person> CreatePersonWithHttpInfo(PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'personFields' is set
            if (personFields == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'personFields' when calling PersonApi->CreatePerson");
            }

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }
            localVarRequestOptions.Data = personFields;

            localVarRequestOptions.Operation = "PersonApi.CreatePerson";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Person>("/api/persons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        public async System.Threading.Tasks.Task<Person> CreatePersonAsync(PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<Person> localVarResponse = await CreatePersonWithHttpInfoAsync(personFields, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<Person>> CreatePersonWithHttpInfoAsync(PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'personFields' is set
            if (personFields == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'personFields' when calling PersonApi->CreatePerson");
            }


            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }
            localVarRequestOptions.Data = personFields;

            localVarRequestOptions.Operation = "PersonApi.CreatePerson";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Person>("/api/persons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete image of person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteImageOfPerson(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0)
        {
            DeleteImageOfPersonWithHttpInfo(personId, imageId, xRequestID);
        }

        /// <summary>
        /// Delete image of person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<Object> DeleteImageOfPersonWithHttpInfo(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'imageId' when calling PersonApi->DeleteImageOfPerson");
            }

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(imageId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "PersonApi.DeleteImageOfPerson";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/persons/{personId}/images/{imageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteImageOfPerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete image of person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteImageOfPersonAsync(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteImageOfPersonWithHttpInfoAsync(personId, imageId, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete image of person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<Object>> DeleteImageOfPersonWithHttpInfoAsync(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'imageId' when calling PersonApi->DeleteImageOfPerson");
            }


            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(imageId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "PersonApi.DeleteImageOfPerson";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/persons/{personId}/images/{imageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteImageOfPerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePerson(Guid personId, string? xRequestID = default(string?), int operationIndex = 0)
        {
            DeletePersonWithHttpInfo(personId, xRequestID);
        }

        /// <summary>
        /// Delete person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<Object> DeletePersonWithHttpInfo(Guid personId, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "PersonApi.DeletePerson";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/persons/{personId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePersonAsync(Guid personId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePersonWithHttpInfoAsync(personId, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<Object>> DeletePersonWithHttpInfoAsync(Guid personId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "PersonApi.DeletePerson";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/persons/{personId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get person groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupPage</returns>
        public GroupPage GetAllGroupsByPersonId(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<GroupPage> localVarResponse = GetAllGroupsByPersonIdWithHttpInfo(personId, page, size, xRequestID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get person groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupPage</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<GroupPage> GetAllGroupsByPersonIdWithHttpInfo(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "PersonApi.GetAllGroupsByPersonId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupPage>("/api/persons/{personId}/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllGroupsByPersonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get person groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupPage</returns>
        public async System.Threading.Tasks.Task<GroupPage> GetAllGroupsByPersonIdAsync(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<GroupPage> localVarResponse = await GetAllGroupsByPersonIdWithHttpInfoAsync(personId, page, size, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get person groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupPage)</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<GroupPage>> GetAllGroupsByPersonIdWithHttpInfoAsync(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "PersonApi.GetAllGroupsByPersonId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupPage>("/api/persons/{personId}/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllGroupsByPersonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get person images 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImagePage</returns>
        public ImagePage GetAllImagesByPersonId(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<ImagePage> localVarResponse = GetAllImagesByPersonIdWithHttpInfo(personId, page, size, xRequestID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get person images 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImagePage</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<ImagePage> GetAllImagesByPersonIdWithHttpInfo(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "PersonApi.GetAllImagesByPersonId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ImagePage>("/api/persons/{personId}/images", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllImagesByPersonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get person images 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImagePage</returns>
        public async System.Threading.Tasks.Task<ImagePage> GetAllImagesByPersonIdAsync(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<ImagePage> localVarResponse = await GetAllImagesByPersonIdWithHttpInfoAsync(personId, page, size, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get person images 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImagePage)</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<ImagePage>> GetAllImagesByPersonIdWithHttpInfoAsync(Guid personId, int page, int size, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            localVarRequestOptions.QueryParameters.Add(Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "PersonApi.GetAllImagesByPersonId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ImagePage>("/api/persons/{personId}/images", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllImagesByPersonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get person image by id 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetImageOfPerson(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<System.IO.Stream> localVarResponse = GetImageOfPersonWithHttpInfo(personId, imageId, xRequestID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get person image by id 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<System.IO.Stream> GetImageOfPersonWithHttpInfo(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'imageId' when calling PersonApi->GetImageOfPerson");
            }

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "image/*"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(imageId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "PersonApi.GetImageOfPerson";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/api/persons/{personId}/images/{imageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImageOfPerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get person image by id 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetImageOfPersonAsync(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetImageOfPersonWithHttpInfoAsync(personId, imageId, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get person image by id 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageId">Image ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<System.IO.Stream>> GetImageOfPersonWithHttpInfoAsync(Guid personId, string imageId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'imageId' when calling PersonApi->GetImageOfPerson");
            }


            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "image/*"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(imageId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "PersonApi.GetImageOfPerson";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/api/persons/{personId}/images/{imageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImageOfPerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Person</returns>
        public Person GetPerson(Guid personId, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<Person> localVarResponse = GetPersonWithHttpInfo(personId, xRequestID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Person</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<Person> GetPersonWithHttpInfo(Guid personId, string? xRequestID = default(string?), int operationIndex = 0)
        {
            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "PersonApi.GetPerson";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Person>("/api/persons/{personId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        public async System.Threading.Tasks.Task<Person> GetPersonAsync(Guid personId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Regula.FaceSDK.WebClient.Client.ApiResponse<Person> localVarResponse = await GetPersonWithHttpInfoAsync(personId, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<Person>> GetPersonWithHttpInfoAsync(Guid personId, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }

            localVarRequestOptions.Operation = "PersonApi.GetPerson";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Person>("/api/persons/{personId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdatePerson(Guid personId, PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0)
        {
            UpdatePersonWithHttpInfo(personId, personFields, xRequestID);
        }

        /// <summary>
        /// Update person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Regula.FaceSDK.WebClient.Client.ApiResponse<Object> UpdatePersonWithHttpInfo(Guid personId, PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'personFields' is set
            if (personFields == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'personFields' when calling PersonApi->UpdatePerson");
            }

            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }
            localVarRequestOptions.Data = personFields;

            localVarRequestOptions.Operation = "PersonApi.UpdatePerson";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/persons/{personId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePersonAsync(Guid personId, PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdatePersonWithHttpInfoAsync(personId, personFields, xRequestID, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Regula.FaceSDK.WebClient.Client.ApiResponse<Object>> UpdatePersonWithHttpInfoAsync(Guid personId, PersonFields personFields, string? xRequestID = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'personFields' is set
            if (personFields == null)
            {
                throw new Regula.FaceSDK.WebClient.Client.ApiException(400, "Missing required parameter 'personFields' when calling PersonApi->UpdatePerson");
            }


            Regula.FaceSDK.WebClient.Client.RequestOptions localVarRequestOptions = new Regula.FaceSDK.WebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Regula.FaceSDK.WebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personId", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(personId)); // path parameter
            if (xRequestID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-RequestID", Regula.FaceSDK.WebClient.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            }
            localVarRequestOptions.Data = personFields;

            localVarRequestOptions.Operation = "PersonApi.UpdatePerson";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/persons/{personId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePerson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
