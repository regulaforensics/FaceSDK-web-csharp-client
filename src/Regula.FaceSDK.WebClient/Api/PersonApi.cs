/*
 * Regula FaceSDK Web API
 *
 * Regula FaceSDK Web API # Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Regula.FaceSDK.WebClient.Client;
using Regula.FaceSDK.WebClient.Model;

namespace Regula.FaceSDK.WebClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add person image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>Image</returns>
        Image AddImageToPerson (Guid personId, ImageFields imageFields, string xRequestID = default(string));

        /// <summary>
        /// Add person image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Image</returns>
        ApiResponse<Image> AddImageToPersonWithHttpInfo (Guid personId, ImageFields imageFields, string xRequestID = default(string));
        /// <summary>
        /// Create person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>Person</returns>
        Person CreatePerson (PersonFields personFields, string xRequestID = default(string));

        /// <summary>
        /// Create person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Person</returns>
        ApiResponse<Person> CreatePersonWithHttpInfo (PersonFields personFields, string xRequestID = default(string));
        /// <summary>
        /// Delete image of person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns></returns>
        void DeleteImageOfPerson (string imageId, Guid personId, string xRequestID = default(string));

        /// <summary>
        /// Delete image of person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteImageOfPersonWithHttpInfo (string imageId, Guid personId, string xRequestID = default(string));
        /// <summary>
        /// Delete person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns></returns>
        void DeletePerson (Guid personId, string xRequestID = default(string));

        /// <summary>
        /// Delete person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePersonWithHttpInfo (Guid personId, string xRequestID = default(string));
        /// <summary>
        /// Get person groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>GroupPage</returns>
        GroupPage GetAllGroupsByPersonId (int page, int size, Guid personId, string xRequestID = default(string));

        /// <summary>
        /// Get person groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of GroupPage</returns>
        ApiResponse<GroupPage> GetAllGroupsByPersonIdWithHttpInfo (int page, int size, Guid personId, string xRequestID = default(string));
        /// <summary>
        /// Get person images
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ImagePage</returns>
        ImagePage GetAllImagesByPersonId (int page, int size, Guid personId, string xRequestID = default(string));

        /// <summary>
        /// Get person images
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of ImagePage</returns>
        ApiResponse<ImagePage> GetAllImagesByPersonIdWithHttpInfo (int page, int size, Guid personId, string xRequestID = default(string));
        /// <summary>
        /// Get person image by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetImageOfPerson (string imageId, Guid personId, string xRequestID = default(string));

        /// <summary>
        /// Get person image by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetImageOfPersonWithHttpInfo (string imageId, Guid personId, string xRequestID = default(string));
        /// <summary>
        /// Get person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>Person</returns>
        Person GetPerson (Guid personId, string xRequestID = default(string));

        /// <summary>
        /// Get person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Person</returns>
        ApiResponse<Person> GetPersonWithHttpInfo (Guid personId, string xRequestID = default(string));
        /// <summary>
        /// Update person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns></returns>
        void UpdatePerson (Guid personId, PersonFields personFields, string xRequestID = default(string));

        /// <summary>
        /// Update person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePersonWithHttpInfo (Guid personId, PersonFields personFields, string xRequestID = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add person image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Image</returns>
        System.Threading.Tasks.Task<Image> AddImageToPersonAsync (Guid personId, ImageFields imageFields, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add person image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Image)</returns>
        System.Threading.Tasks.Task<ApiResponse<Image>> AddImageToPersonWithHttpInfoAsync (Guid personId, ImageFields imageFields, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Person</returns>
        System.Threading.Tasks.Task<Person> CreatePersonAsync (PersonFields personFields, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Person)</returns>
        System.Threading.Tasks.Task<ApiResponse<Person>> CreatePersonWithHttpInfoAsync (PersonFields personFields, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete image of person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteImageOfPersonAsync (string imageId, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete image of person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteImageOfPersonWithHttpInfoAsync (string imageId, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePersonAsync (Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePersonWithHttpInfoAsync (Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get person groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupPage</returns>
        System.Threading.Tasks.Task<GroupPage> GetAllGroupsByPersonIdAsync (int page, int size, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get person groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupPage>> GetAllGroupsByPersonIdWithHttpInfoAsync (int page, int size, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get person images
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ImagePage</returns>
        System.Threading.Tasks.Task<ImagePage> GetAllImagesByPersonIdAsync (int page, int size, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get person images
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ImagePage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImagePage>> GetAllImagesByPersonIdWithHttpInfoAsync (int page, int size, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get person image by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetImageOfPersonAsync (string imageId, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get person image by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetImageOfPersonWithHttpInfoAsync (string imageId, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Person</returns>
        System.Threading.Tasks.Task<Person> GetPersonAsync (Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Person)</returns>
        System.Threading.Tasks.Task<ApiResponse<Person>> GetPersonWithHttpInfoAsync (Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePersonAsync (Guid personId, PersonFields personFields, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePersonWithHttpInfoAsync (Guid personId, PersonFields personFields, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PersonApi : IPersonApi
    {
        private Regula.FaceSDK.WebClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonApi(String basePath)
        {
            this.Configuration = new Regula.FaceSDK.WebClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Regula.FaceSDK.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class
        /// </summary>
        /// <returns></returns>
        public PersonApi()
        {
            this.Configuration = Regula.FaceSDK.WebClient.Client.Configuration.Default;

            ExceptionFactory = Regula.FaceSDK.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersonApi(Regula.FaceSDK.WebClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Regula.FaceSDK.WebClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Regula.FaceSDK.WebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Regula.FaceSDK.WebClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Regula.FaceSDK.WebClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add person image 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>Image</returns>
        public Image AddImageToPerson (Guid personId, ImageFields imageFields, string xRequestID = default(string))
        {
             ApiResponse<Image> localVarResponse = AddImageToPersonWithHttpInfo(personId, imageFields, xRequestID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add person image 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Image</returns>
        public ApiResponse<Image> AddImageToPersonWithHttpInfo (Guid personId, ImageFields imageFields, string xRequestID = default(string))
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->AddImageToPerson");
            // verify the required parameter 'imageFields' is set
            if (imageFields == null)
                throw new ApiException(400, "Missing required parameter 'imageFields' when calling PersonApi->AddImageToPerson");

            var localVarPath = "/api/persons/{personId}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter
            if (imageFields != null && imageFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(imageFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = imageFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddImageToPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Image>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Image) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Image)));
        }

        /// <summary>
        /// Add person image 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Image</returns>
        public async System.Threading.Tasks.Task<Image> AddImageToPersonAsync (Guid personId, ImageFields imageFields, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Image> localVarResponse = await AddImageToPersonWithHttpInfoAsync(personId, imageFields, xRequestID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add person image 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="imageFields">Image to add.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Image)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Image>> AddImageToPersonWithHttpInfoAsync (Guid personId, ImageFields imageFields, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->AddImageToPerson");
            // verify the required parameter 'imageFields' is set
            if (imageFields == null)
                throw new ApiException(400, "Missing required parameter 'imageFields' when calling PersonApi->AddImageToPerson");

            var localVarPath = "/api/persons/{personId}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter
            if (imageFields != null && imageFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(imageFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = imageFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddImageToPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Image>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Image) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Image)));
        }

        /// <summary>
        /// Create person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>Person</returns>
        public virtual Person CreatePerson (PersonFields personFields, string xRequestID = default(string))
        {
             ApiResponse<Person> localVarResponse = CreatePersonWithHttpInfo(personFields, xRequestID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Person</returns>
        public ApiResponse<Person> CreatePersonWithHttpInfo (PersonFields personFields, string xRequestID = default(string))
        {
            // verify the required parameter 'personFields' is set
            if (personFields == null)
                throw new ApiException(400, "Missing required parameter 'personFields' when calling PersonApi->CreatePerson");

            var localVarPath = "/api/persons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter
            if (personFields != null && personFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(personFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = personFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Person>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Person) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Person)));
        }

        /// <summary>
        /// Create person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Person</returns>
        public async System.Threading.Tasks.Task<Person> CreatePersonAsync (PersonFields personFields, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Person> localVarResponse = await CreatePersonWithHttpInfoAsync(personFields, xRequestID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personFields"></param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Person)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Person>> CreatePersonWithHttpInfoAsync (PersonFields personFields, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'personFields' is set
            if (personFields == null)
                throw new ApiException(400, "Missing required parameter 'personFields' when calling PersonApi->CreatePerson");

            var localVarPath = "/api/persons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter
            if (personFields != null && personFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(personFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = personFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Person>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Person) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Person)));
        }

        /// <summary>
        /// Delete image of person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns></returns>
        public void DeleteImageOfPerson (string imageId, Guid personId, string xRequestID = default(string))
        {
             DeleteImageOfPersonWithHttpInfo(imageId, personId, xRequestID);
        }

        /// <summary>
        /// Delete image of person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteImageOfPersonWithHttpInfo (string imageId, Guid personId, string xRequestID = default(string))
        {
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PersonApi->DeleteImageOfPerson");
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->DeleteImageOfPerson");

            var localVarPath = "/api/persons/{personId}/images/{imageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageId != null) localVarPathParams.Add("imageId", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter
            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteImageOfPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete image of person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteImageOfPersonAsync (string imageId, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteImageOfPersonWithHttpInfoAsync(imageId, personId, xRequestID, cancellationToken);

        }

        /// <summary>
        /// Delete image of person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteImageOfPersonWithHttpInfoAsync (string imageId, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PersonApi->DeleteImageOfPerson");
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->DeleteImageOfPerson");

            var localVarPath = "/api/persons/{personId}/images/{imageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageId != null) localVarPathParams.Add("imageId", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter
            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteImageOfPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns></returns>
        public void DeletePerson (Guid personId, string xRequestID = default(string))
        {
             DeletePersonWithHttpInfo(personId, xRequestID);
        }

        /// <summary>
        /// Delete person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePersonWithHttpInfo (Guid personId, string xRequestID = default(string))
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->DeletePerson");

            var localVarPath = "/api/persons/{personId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePersonAsync (Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeletePersonWithHttpInfoAsync(personId, xRequestID, cancellationToken);

        }

        /// <summary>
        /// Delete person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePersonWithHttpInfoAsync (Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->DeletePerson");

            var localVarPath = "/api/persons/{personId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get person groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>GroupPage</returns>
        public GroupPage GetAllGroupsByPersonId (int page, int size, Guid personId, string xRequestID = default(string))
        {
             ApiResponse<GroupPage> localVarResponse = GetAllGroupsByPersonIdWithHttpInfo(page, size, personId, xRequestID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get person groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of GroupPage</returns>
        public ApiResponse<GroupPage> GetAllGroupsByPersonIdWithHttpInfo (int page, int size, Guid personId, string xRequestID = default(string))
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling PersonApi->GetAllGroupsByPersonId");
            // verify the required parameter 'size' is set
            if (size == null)
                throw new ApiException(400, "Missing required parameter 'size' when calling PersonApi->GetAllGroupsByPersonId");
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->GetAllGroupsByPersonId");

            var localVarPath = "/api/persons/{personId}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllGroupsByPersonId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupPage)));
        }

        /// <summary>
        /// Get person groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupPage</returns>
        public async System.Threading.Tasks.Task<GroupPage> GetAllGroupsByPersonIdAsync (int page, int size, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GroupPage> localVarResponse = await GetAllGroupsByPersonIdWithHttpInfoAsync(page, size, personId, xRequestID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get person groups 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupPage>> GetAllGroupsByPersonIdWithHttpInfoAsync (int page, int size, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling PersonApi->GetAllGroupsByPersonId");
            // verify the required parameter 'size' is set
            if (size == null)
                throw new ApiException(400, "Missing required parameter 'size' when calling PersonApi->GetAllGroupsByPersonId");
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->GetAllGroupsByPersonId");

            var localVarPath = "/api/persons/{personId}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllGroupsByPersonId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupPage)));
        }

        /// <summary>
        /// Get person images 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ImagePage</returns>
        public ImagePage GetAllImagesByPersonId (int page, int size, Guid personId, string xRequestID = default(string))
        {
             ApiResponse<ImagePage> localVarResponse = GetAllImagesByPersonIdWithHttpInfo(page, size, personId, xRequestID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get person images 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of ImagePage</returns>
        public ApiResponse<ImagePage> GetAllImagesByPersonIdWithHttpInfo (int page, int size, Guid personId, string xRequestID = default(string))
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling PersonApi->GetAllImagesByPersonId");
            // verify the required parameter 'size' is set
            if (size == null)
                throw new ApiException(400, "Missing required parameter 'size' when calling PersonApi->GetAllImagesByPersonId");
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->GetAllImagesByPersonId");

            var localVarPath = "/api/persons/{personId}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllImagesByPersonId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImagePage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ImagePage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImagePage)));
        }

        /// <summary>
        /// Get person images 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ImagePage</returns>
        public async System.Threading.Tasks.Task<ImagePage> GetAllImagesByPersonIdAsync (int page, int size, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ImagePage> localVarResponse = await GetAllImagesByPersonIdWithHttpInfoAsync(page, size, personId, xRequestID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get person images 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to get a list of persons or groups.</param>
        /// <param name="size">The page size with a list of persons or groups, items.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ImagePage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImagePage>> GetAllImagesByPersonIdWithHttpInfoAsync (int page, int size, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling PersonApi->GetAllImagesByPersonId");
            // verify the required parameter 'size' is set
            if (size == null)
                throw new ApiException(400, "Missing required parameter 'size' when calling PersonApi->GetAllImagesByPersonId");
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->GetAllImagesByPersonId");

            var localVarPath = "/api/persons/{personId}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllImagesByPersonId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImagePage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ImagePage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImagePage)));
        }

        /// <summary>
        /// Get person image by id 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetImageOfPerson (string imageId, Guid personId, string xRequestID = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetImageOfPersonWithHttpInfo(imageId, personId, xRequestID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get person image by id 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetImageOfPersonWithHttpInfo (string imageId, Guid personId, string xRequestID = default(string))
        {
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PersonApi->GetImageOfPerson");
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->GetImageOfPerson");

            var localVarPath = "/api/persons/{personId}/images/{imageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "image/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageId != null) localVarPathParams.Add("imageId", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter
            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImageOfPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get person image by id 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetImageOfPersonAsync (string imageId, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetImageOfPersonWithHttpInfoAsync(imageId, personId, xRequestID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get person image by id 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageId">Image ID.</param>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetImageOfPersonWithHttpInfoAsync (string imageId, Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling PersonApi->GetImageOfPerson");
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->GetImageOfPerson");

            var localVarPath = "/api/persons/{personId}/images/{imageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "image/_*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageId != null) localVarPathParams.Add("imageId", this.Configuration.ApiClient.ParameterToString(imageId)); // path parameter
            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImageOfPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>Person</returns>
        public Person GetPerson (Guid personId, string xRequestID = default(string))
        {
             ApiResponse<Person> localVarResponse = GetPersonWithHttpInfo(personId, xRequestID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Person</returns>
        public ApiResponse<Person> GetPersonWithHttpInfo (Guid personId, string xRequestID = default(string))
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->GetPerson");

            var localVarPath = "/api/persons/{personId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Person>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Person) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Person)));
        }

        /// <summary>
        /// Get person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Person</returns>
        public async System.Threading.Tasks.Task<Person> GetPersonAsync (Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Person> localVarResponse = await GetPersonWithHttpInfoAsync(personId, xRequestID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Person)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Person>> GetPersonWithHttpInfoAsync (Guid personId, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->GetPerson");

            var localVarPath = "/api/persons/{personId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Person>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Person) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Person)));
        }

        /// <summary>
        /// Update person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns></returns>
        public void UpdatePerson (Guid personId, PersonFields personFields, string xRequestID = default(string))
        {
             UpdatePersonWithHttpInfo(personId, personFields, xRequestID);
        }

        /// <summary>
        /// Update person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePersonWithHttpInfo (Guid personId, PersonFields personFields, string xRequestID = default(string))
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->UpdatePerson");
            // verify the required parameter 'personFields' is set
            if (personFields == null)
                throw new ApiException(400, "Missing required parameter 'personFields' when calling PersonApi->UpdatePerson");

            var localVarPath = "/api/persons/{personId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter
            if (personFields != null && personFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(personFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = personFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePersonAsync (Guid personId, PersonFields personFields, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdatePersonWithHttpInfoAsync(personId, personFields, xRequestID, cancellationToken);

        }

        /// <summary>
        /// Update person 
        /// </summary>
        /// <exception cref="Regula.FaceSDK.WebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId">Person ID.</param>
        /// <param name="personFields">Request body for the Person to update.</param>
        /// <param name="xRequestID">Request header label. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePersonWithHttpInfoAsync (Guid personId, PersonFields personFields, string xRequestID = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonApi->UpdatePerson");
            // verify the required parameter 'personFields' is set
            if (personFields == null)
                throw new ApiException(400, "Missing required parameter 'personFields' when calling PersonApi->UpdatePerson");

            var localVarPath = "/api/persons/{personId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarPathParams.Add("personId", this.Configuration.ApiClient.ParameterToString(personId)); // path parameter
            if (xRequestID != null) localVarHeaderParams.Add("X-RequestID", this.Configuration.ApiClient.ParameterToString(xRequestID)); // header parameter
            if (personFields != null && personFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(personFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = personFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
