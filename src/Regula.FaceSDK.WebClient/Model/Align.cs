/* 
 * Regula FaceSDK Web API
 *
 * Regula FaceSDK Web API
 *
 * The version of the OpenAPI document: 3.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.FaceSDK.WebClient.Client.OpenAPIDateConverter;

namespace Regula.FaceSDK.WebClient.Model
{
    /// <summary>
    /// Align
    /// </summary>
    [DataContract]
    public partial class Align :  IEquatable<Align>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public FaceAlignTypeQuality? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Align" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="pad">Array of RGB color.</param>
        /// <param name="cropSize">cropSize.</param>
        public Align(FaceAlignTypeQuality? type = default(FaceAlignTypeQuality?), List<int> pad = default(List<int>), List<int> cropSize = default(List<int>))
        {
            this.Type = type;
            this.Pad = pad;
            this.CropSize = cropSize;
        }
        

        /// <summary>
        /// Array of RGB color
        /// </summary>
        /// <value>Array of RGB color</value>
        [DataMember(Name="pad", EmitDefaultValue=false)]
        public List<int> Pad { get; set; }

        /// <summary>
        /// Gets or Sets CropSize
        /// </summary>
        [DataMember(Name="cropSize", EmitDefaultValue=false)]
        public List<int> CropSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Align {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Pad: ").Append(Pad).Append("\n");
            sb.Append("  CropSize: ").Append(CropSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Align);
        }

        /// <summary>
        /// Returns true if Align instances are equal
        /// </summary>
        /// <param name="input">Instance of Align to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Align input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Pad == input.Pad ||
                    this.Pad != null &&
                    input.Pad != null &&
                    this.Pad.SequenceEqual(input.Pad)
                ) && 
                (
                    this.CropSize == input.CropSize ||
                    this.CropSize != null &&
                    input.CropSize != null &&
                    this.CropSize.SequenceEqual(input.CropSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Pad != null)
                    hashCode = hashCode * 59 + this.Pad.GetHashCode();
                if (this.CropSize != null)
                    hashCode = hashCode * 59 + this.CropSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
