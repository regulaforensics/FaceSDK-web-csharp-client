/*
 * Regula FaceSDK Web API
 *
 * [Download OpenAPI specification](https://github.com/regulaforensics/FaceSDK-web-openapi) ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.FaceSDK.WebClient.Client.OpenAPIDateConverter;

namespace Regula.FaceSDK.WebClient.Model
{
    /// <summary>
    /// Detection
    /// </summary>
    [DataContract(Name = "Detection")]
    public partial class Detection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Detection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Detection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Detection" /> class.
        /// </summary>
        /// <param name="crop">Base64 encoded image..</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="landmarks">Absolute coordinates (x,y) of five points of each detected face: left eye, right eye, nose, left point of lips, right point of lips. (required).</param>
        /// <param name="quality">quality.</param>
        /// <param name="roi">The rectangular area of a detected face that is represented by a set of four elements: the X and Y coordinates of the top-left point, and the width and height dimensions of the rectangle. (required).</param>
        /// <param name="thumbnail">Base64 of the cropped portrait..</param>
        public Detection(byte[] crop = default(byte[]), DetectionAttributes attributes = default(DetectionAttributes), List<List<int>> landmarks = default(List<List<int>>), DetectionQuality quality = default(DetectionQuality), List<decimal> roi = default(List<decimal>), byte[] thumbnail = default(byte[]))
        {
            // to ensure "landmarks" is required (not null)
            if (landmarks == null)
            {
                throw new ArgumentNullException("landmarks is a required property for Detection and cannot be null");
            }
            this.Landmarks = landmarks;
            // to ensure "roi" is required (not null)
            if (roi == null)
            {
                throw new ArgumentNullException("roi is a required property for Detection and cannot be null");
            }
            this.Roi = roi;
            this.Crop = crop;
            this.Attributes = attributes;
            this.Quality = quality;
            this.Thumbnail = thumbnail;
        }

        /// <summary>
        /// Base64 encoded image.
        /// </summary>
        /// <value>Base64 encoded image.</value>
        [DataMember(Name = "crop", EmitDefaultValue = false)]
        public byte[] Crop { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public DetectionAttributes Attributes { get; set; }

        /// <summary>
        /// Absolute coordinates (x,y) of five points of each detected face: left eye, right eye, nose, left point of lips, right point of lips.
        /// </summary>
        /// <value>Absolute coordinates (x,y) of five points of each detected face: left eye, right eye, nose, left point of lips, right point of lips.</value>
        /// <example>[[&quot;x&quot;,&quot;y&quot;]]</example>
        [DataMember(Name = "landmarks", IsRequired = true, EmitDefaultValue = true)]
        public List<List<int>> Landmarks { get; set; }

        /// <summary>
        /// Gets or Sets Quality
        /// </summary>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public DetectionQuality Quality { get; set; }

        /// <summary>
        /// The rectangular area of a detected face that is represented by a set of four elements: the X and Y coordinates of the top-left point, and the width and height dimensions of the rectangle.
        /// </summary>
        /// <value>The rectangular area of a detected face that is represented by a set of four elements: the X and Y coordinates of the top-left point, and the width and height dimensions of the rectangle.</value>
        /// <example>[&quot;x&quot;,&quot;y&quot;,&quot;width&quot;,&quot;height&quot;]</example>
        [DataMember(Name = "roi", IsRequired = true, EmitDefaultValue = true)]
        public List<decimal> Roi { get; set; }

        /// <summary>
        /// Base64 of the cropped portrait.
        /// </summary>
        /// <value>Base64 of the cropped portrait.</value>
        [DataMember(Name = "thumbnail", EmitDefaultValue = false)]
        public byte[] Thumbnail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Detection {\n");
            sb.Append("  Crop: ").Append(Crop).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Landmarks: ").Append(Landmarks).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  Roi: ").Append(Roi).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
