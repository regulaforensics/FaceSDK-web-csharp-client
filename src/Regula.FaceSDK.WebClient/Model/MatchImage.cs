/*
 * Regula FaceSDK Web API
 *
 * [Download OpenAPI specification](https://github.com/regulaforensics/FaceSDK-web-openapi) ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.FaceSDK.WebClient.Client.OpenAPIDateConverter;

namespace Regula.FaceSDK.WebClient.Model
{
    /// <summary>
    /// MatchImage
    /// </summary>
    [DataContract]
    public partial class MatchImage :  IEquatable<MatchImage>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ImageSource? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchImage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MatchImage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchImage" /> class.
        /// </summary>
        /// <param name="index">The image index number. Can be given; if not given, the index numbers are set automatically starting from 0. All index numbers must be whole and unique—not repeated..</param>
        /// <param name="type">type.</param>
        /// <param name="data">Base64 encoded image. (required).</param>
        /// <param name="detectAll">Whether to detect all faces in the image. If set to false, only the most central face is detected. (default to false).</param>
        public MatchImage(int index = default(int), ImageSource? type = default(ImageSource?), byte[] data = default(byte[]), bool detectAll = false)
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for MatchImage and cannot be null");
            }
            else
            {
                this.Data = data;
            }

            this.Index = index;
            this.Type = type;
            // use default value if no "detectAll" provided
            if (detectAll == null)
            {
                this.DetectAll = false;
            }
            else
            {
                this.DetectAll = detectAll;
            }
        }

        /// <summary>
        /// The image index number. Can be given; if not given, the index numbers are set automatically starting from 0. All index numbers must be whole and unique—not repeated.
        /// </summary>
        /// <value>The image index number. Can be given; if not given, the index numbers are set automatically starting from 0. All index numbers must be whole and unique—not repeated.</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int Index { get; set; }


        /// <summary>
        /// Base64 encoded image.
        /// </summary>
        /// <value>Base64 encoded image.</value>
        [DataMember(Name="data", EmitDefaultValue=true)]
        public byte[] Data { get; set; }

        /// <summary>
        /// Whether to detect all faces in the image. If set to false, only the most central face is detected.
        /// </summary>
        /// <value>Whether to detect all faces in the image. If set to false, only the most central face is detected.</value>
        [DataMember(Name="detectAll", EmitDefaultValue=false)]
        public bool DetectAll { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MatchImage {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DetectAll: ").Append(DetectAll).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchImage);
        }

        /// <summary>
        /// Returns true if MatchImage instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchImage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchImage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.DetectAll == input.DetectAll ||
                    (this.DetectAll != null &&
                    this.DetectAll.Equals(input.DetectAll))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.DetectAll != null)
                    hashCode = hashCode * 59 + this.DetectAll.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
