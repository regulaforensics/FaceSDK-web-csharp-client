/*
 * Regula FaceSDK Web API
 *
 * [Download OpenAPI specification](https://github.com/regulaforensics/FaceSDK-web-openapi) ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.FaceSDK.WebClient.Client.OpenAPIDateConverter;

namespace Regula.FaceSDK.WebClient.Model
{
    /// <summary>
    /// MatchImageResult
    /// </summary>
    [DataContract]
    public partial class MatchImageResult :  IEquatable<MatchImageResult>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets First
        /// </summary>
        [DataMember(Name="first", EmitDefaultValue=false)]
        public ImageSource? First { get; set; }
        /// <summary>
        /// Gets or Sets Second
        /// </summary>
        [DataMember(Name="second", EmitDefaultValue=false)]
        public ImageSource? Second { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchImageResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MatchImageResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchImageResult" /> class.
        /// </summary>
        /// <param name="firstIndex">The image index number. Can be given; if not given, the index numbers are set automatically starting from 0. All index numbers must be whole and unique—not repeated. (required).</param>
        /// <param name="firstFaceIndex">The detected face index number..</param>
        /// <param name="first">first.</param>
        /// <param name="secondIndex">The image index number. Can be given; if not given, the index numbers are set automatically starting from 0. All index numbers must be whole and unique—not repeated. (required).</param>
        /// <param name="secondFaceIndex">The detected face index number..</param>
        /// <param name="second">second.</param>
        /// <param name="score">A dimensionless number that shows how similar the compared faces are. 0—absolutely identical faces..</param>
        /// <param name="similarity">The detected faces similarity, %. 100%—absolutely identical faces, 0%—absolutely not identical..</param>
        public MatchImageResult(int firstIndex = default(int), decimal firstFaceIndex = default(decimal), ImageSource? first = default(ImageSource?), int secondIndex = default(int), decimal secondFaceIndex = default(decimal), ImageSource? second = default(ImageSource?), decimal score = default(decimal), decimal similarity = default(decimal))
        {
            // to ensure "firstIndex" is required (not null)
            if (firstIndex == null)
            {
                throw new InvalidDataException("firstIndex is a required property for MatchImageResult and cannot be null");
            }
            else
            {
                this.FirstIndex = firstIndex;
            }

            // to ensure "secondIndex" is required (not null)
            if (secondIndex == null)
            {
                throw new InvalidDataException("secondIndex is a required property for MatchImageResult and cannot be null");
            }
            else
            {
                this.SecondIndex = secondIndex;
            }

            this.FirstFaceIndex = firstFaceIndex;
            this.First = first;
            this.SecondFaceIndex = secondFaceIndex;
            this.Second = second;
            this.Score = score;
            this.Similarity = similarity;
        }

        /// <summary>
        /// The image index number. Can be given; if not given, the index numbers are set automatically starting from 0. All index numbers must be whole and unique—not repeated.
        /// </summary>
        /// <value>The image index number. Can be given; if not given, the index numbers are set automatically starting from 0. All index numbers must be whole and unique—not repeated.</value>
        [DataMember(Name="firstIndex", EmitDefaultValue=true)]
        public int FirstIndex { get; set; }

        /// <summary>
        /// The detected face index number.
        /// </summary>
        /// <value>The detected face index number.</value>
        [DataMember(Name="firstFaceIndex", EmitDefaultValue=false)]
        public decimal FirstFaceIndex { get; set; }


        /// <summary>
        /// The image index number. Can be given; if not given, the index numbers are set automatically starting from 0. All index numbers must be whole and unique—not repeated.
        /// </summary>
        /// <value>The image index number. Can be given; if not given, the index numbers are set automatically starting from 0. All index numbers must be whole and unique—not repeated.</value>
        [DataMember(Name="secondIndex", EmitDefaultValue=true)]
        public int SecondIndex { get; set; }

        /// <summary>
        /// The detected face index number.
        /// </summary>
        /// <value>The detected face index number.</value>
        [DataMember(Name="secondFaceIndex", EmitDefaultValue=false)]
        public decimal SecondFaceIndex { get; set; }


        /// <summary>
        /// A dimensionless number that shows how similar the compared faces are. 0—absolutely identical faces.
        /// </summary>
        /// <value>A dimensionless number that shows how similar the compared faces are. 0—absolutely identical faces.</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public decimal Score { get; set; }

        /// <summary>
        /// The detected faces similarity, %. 100%—absolutely identical faces, 0%—absolutely not identical.
        /// </summary>
        /// <value>The detected faces similarity, %. 100%—absolutely identical faces, 0%—absolutely not identical.</value>
        [DataMember(Name="similarity", EmitDefaultValue=false)]
        public decimal Similarity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MatchImageResult {\n");
            sb.Append("  FirstIndex: ").Append(FirstIndex).Append("\n");
            sb.Append("  FirstFaceIndex: ").Append(FirstFaceIndex).Append("\n");
            sb.Append("  First: ").Append(First).Append("\n");
            sb.Append("  SecondIndex: ").Append(SecondIndex).Append("\n");
            sb.Append("  SecondFaceIndex: ").Append(SecondFaceIndex).Append("\n");
            sb.Append("  Second: ").Append(Second).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Similarity: ").Append(Similarity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchImageResult);
        }

        /// <summary>
        /// Returns true if MatchImageResult instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchImageResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchImageResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FirstIndex == input.FirstIndex ||
                    (this.FirstIndex != null &&
                    this.FirstIndex.Equals(input.FirstIndex))
                ) && 
                (
                    this.FirstFaceIndex == input.FirstFaceIndex ||
                    (this.FirstFaceIndex != null &&
                    this.FirstFaceIndex.Equals(input.FirstFaceIndex))
                ) && 
                (
                    this.First == input.First ||
                    (this.First != null &&
                    this.First.Equals(input.First))
                ) && 
                (
                    this.SecondIndex == input.SecondIndex ||
                    (this.SecondIndex != null &&
                    this.SecondIndex.Equals(input.SecondIndex))
                ) && 
                (
                    this.SecondFaceIndex == input.SecondFaceIndex ||
                    (this.SecondFaceIndex != null &&
                    this.SecondFaceIndex.Equals(input.SecondFaceIndex))
                ) && 
                (
                    this.Second == input.Second ||
                    (this.Second != null &&
                    this.Second.Equals(input.Second))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Similarity == input.Similarity ||
                    (this.Similarity != null &&
                    this.Similarity.Equals(input.Similarity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstIndex != null)
                    hashCode = hashCode * 59 + this.FirstIndex.GetHashCode();
                if (this.FirstFaceIndex != null)
                    hashCode = hashCode * 59 + this.FirstFaceIndex.GetHashCode();
                if (this.First != null)
                    hashCode = hashCode * 59 + this.First.GetHashCode();
                if (this.SecondIndex != null)
                    hashCode = hashCode * 59 + this.SecondIndex.GetHashCode();
                if (this.SecondFaceIndex != null)
                    hashCode = hashCode * 59 + this.SecondFaceIndex.GetHashCode();
                if (this.Second != null)
                    hashCode = hashCode * 59 + this.Second.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Similarity != null)
                    hashCode = hashCode * 59 + this.Similarity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
