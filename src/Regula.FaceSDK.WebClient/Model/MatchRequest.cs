/*
 * Regula Face SDK Web API
 *
 * <a href=\"https://regulaforensics.com/products/face-recognition-sdk/  \" target=\"_blank\">Regula Face SDK</a> is a cross-platform biometric verification solution for a digital identity verification process. The SDK enables convenient and reliable face capture on the client side (mobile, web, and desktop) and further processing on the client or server side.  The Face SDK includes the following features:  * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-detection\" target=\"_blank\">Face Detection</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-comparison-11\" target=\"_blank\">Face Match (1:1)</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-identification-1n\" target=\"_blank\">Face Search (1:N)</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#liveness-assessment\" target=\"_blank\">Liveness Assessment</a>  Here is the <a href=\"https://github.com/regulaforensics/FaceSDK-web-openapi  \" target=\"_blank\">OpenAPI specification on GitHub</a>.   ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.FaceSDK.WebClient.Client.OpenAPIDateConverter;

namespace Regula.FaceSDK.WebClient.Model
{
    /// <summary>
    /// MatchRequest
    /// </summary>
    [DataContract]
    public partial class MatchRequest :  IEquatable<MatchRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MatchRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchRequest" /> class.
        /// </summary>
        /// <param name="tag">Session identificator, should be unique for each session..</param>
        /// <param name="thumbnails">Use &#x60;outputImageParams.crop&#x60; instead..</param>
        /// <param name="images">All images included in the comparison. (required).</param>
        /// <param name="outputImageParams">outputImageParams.</param>
        public MatchRequest(string tag = default(string), Object thumbnails = default(Object), List<MatchImage> images = default(List<MatchImage>), MatchRequestOutputImageParams outputImageParams = default(MatchRequestOutputImageParams))
        {
            this.Thumbnails = thumbnails;
            // to ensure "images" is required (not null)
            if (images == null)
            {
                throw new InvalidDataException("images is a required property for MatchRequest and cannot be null");
            }
            else
            {
                this.Images = images;
            }

            this.Tag = tag;
            this.Thumbnails = thumbnails;
            this.OutputImageParams = outputImageParams;
        }

        /// <summary>
        /// Session identificator, should be unique for each session.
        /// </summary>
        /// <value>Session identificator, should be unique for each session.</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Use &#x60;outputImageParams.crop&#x60; instead.
        /// </summary>
        /// <value>Use &#x60;outputImageParams.crop&#x60; instead.</value>
        [DataMember(Name="thumbnails", EmitDefaultValue=true)]
        [Obsolete]
        public Object Thumbnails { get; set; }

        /// <summary>
        /// All images included in the comparison.
        /// </summary>
        /// <value>All images included in the comparison.</value>
        [DataMember(Name="images", EmitDefaultValue=true)]
        public List<MatchImage> Images { get; set; }

        /// <summary>
        /// Gets or Sets OutputImageParams
        /// </summary>
        [DataMember(Name="outputImageParams", EmitDefaultValue=false)]
        public MatchRequestOutputImageParams OutputImageParams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MatchRequest {\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  OutputImageParams: ").Append(OutputImageParams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchRequest);
        }

        /// <summary>
        /// Returns true if MatchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.Thumbnails == input.Thumbnails ||
                    (this.Thumbnails != null &&
                    this.Thumbnails.Equals(input.Thumbnails))
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.OutputImageParams == input.OutputImageParams ||
                    (this.OutputImageParams != null &&
                    this.OutputImageParams.Equals(input.OutputImageParams))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.Thumbnails != null)
                    hashCode = hashCode * 59 + this.Thumbnails.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.OutputImageParams != null)
                    hashCode = hashCode * 59 + this.OutputImageParams.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
