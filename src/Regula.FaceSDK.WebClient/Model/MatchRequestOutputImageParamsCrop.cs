/*
 * Regula FaceSDK Web API
 *
 * [Download OpenAPI specification](https://github.com/regulaforensics/FaceSDK-web-openapi) ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.FaceSDK.WebClient.Client.OpenAPIDateConverter;

namespace Regula.FaceSDK.WebClient.Model
{
    /// <summary>
    /// Whether to return the Base64 of an aligned and cropped portrait in the &#x60;crop&#x60; field.
    /// </summary>
    [DataContract(Name = "MatchRequest_outputImageParams_crop")]
    public partial class MatchRequestOutputImageParamsCrop : IValidatableObject
    {
        /// <summary>
        /// The aspect ratio according to which face alignment is performed during face detection.
        /// </summary>
        /// <value>The aspect ratio according to which face alignment is performed during face detection.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4
        }


        /// <summary>
        /// The aspect ratio according to which face alignment is performed during face detection.
        /// </summary>
        /// <value>The aspect ratio according to which face alignment is performed during face detection.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchRequestOutputImageParamsCrop" /> class.
        /// </summary>
        /// <param name="padColor">The RGB value of a color for filling background behind a person&#39;s silhouette and for aligning the image..</param>
        /// <param name="returnOriginalRect">Whether to return the coordinates of the rectangle with the face in the original image prepared for the face crop..</param>
        /// <param name="size">The resize value in case &#x60;type&#x60; matches this value. If it doesn&#39;t, no resize is performed..</param>
        /// <param name="type">The aspect ratio according to which face alignment is performed during face detection..</param>
        public MatchRequestOutputImageParamsCrop(List<int> padColor = default(List<int>), bool returnOriginalRect = default(bool), List<int> size = default(List<int>), TypeEnum? type = default(TypeEnum?))
        {
            this.PadColor = padColor;
            this.ReturnOriginalRect = returnOriginalRect;
            this.Size = size;
            this.Type = type;
        }

        /// <summary>
        /// The RGB value of a color for filling background behind a person&#39;s silhouette and for aligning the image.
        /// </summary>
        /// <value>The RGB value of a color for filling background behind a person&#39;s silhouette and for aligning the image.</value>
        [DataMember(Name = "padColor", EmitDefaultValue = false)]
        public List<int> PadColor { get; set; }

        /// <summary>
        /// Whether to return the coordinates of the rectangle with the face in the original image prepared for the face crop.
        /// </summary>
        /// <value>Whether to return the coordinates of the rectangle with the face in the original image prepared for the face crop.</value>
        [DataMember(Name = "returnOriginalRect", EmitDefaultValue = true)]
        public bool ReturnOriginalRect { get; set; }

        /// <summary>
        /// The resize value in case &#x60;type&#x60; matches this value. If it doesn&#39;t, no resize is performed.
        /// </summary>
        /// <value>The resize value in case &#x60;type&#x60; matches this value. If it doesn&#39;t, no resize is performed.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public List<int> Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchRequestOutputImageParamsCrop {\n");
            sb.Append("  PadColor: ").Append(PadColor).Append("\n");
            sb.Append("  ReturnOriginalRect: ").Append(ReturnOriginalRect).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
