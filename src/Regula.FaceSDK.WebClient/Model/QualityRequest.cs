/* 
 * Regula FaceSDK Web API
 *
 * Regula FaceSDK Web API
 *
 * The version of the OpenAPI document: 3.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.FaceSDK.WebClient.Client.OpenAPIDateConverter;

namespace Regula.FaceSDK.WebClient.Model
{
    /// <summary>
    /// QualityRequest
    /// </summary>
    [DataContract]
    public partial class QualityRequest :  IEquatable<QualityRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QualityRequest" /> class.
        /// </summary>
        /// <param name="align">align.</param>
        /// <param name="background">Array of RGB color.</param>
        /// <param name="config">config.</param>
        public QualityRequest(Align align = default(Align), List<int> background = default(List<int>), QualityConfig config = default(QualityConfig))
        {
            this.Align = align;
            this.Background = background;
            this.Config = config;
        }
        
        /// <summary>
        /// Gets or Sets Align
        /// </summary>
        [DataMember(Name="align", EmitDefaultValue=false)]
        public Align Align { get; set; }

        /// <summary>
        /// Array of RGB color
        /// </summary>
        /// <value>Array of RGB color</value>
        [DataMember(Name="background", EmitDefaultValue=false)]
        public List<int> Background { get; set; }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public QualityConfig Config { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QualityRequest {\n");
            sb.Append("  Align: ").Append(Align).Append("\n");
            sb.Append("  Background: ").Append(Background).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QualityRequest);
        }

        /// <summary>
        /// Returns true if QualityRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of QualityRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QualityRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Align == input.Align ||
                    (this.Align != null &&
                    this.Align.Equals(input.Align))
                ) && 
                (
                    this.Background == input.Background ||
                    this.Background != null &&
                    input.Background != null &&
                    this.Background.SequenceEqual(input.Background)
                ) && 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Align != null)
                    hashCode = hashCode * 59 + this.Align.GetHashCode();
                if (this.Background != null)
                    hashCode = hashCode * 59 + this.Background.GetHashCode();
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
