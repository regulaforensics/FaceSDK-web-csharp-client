/* 
 * Regula FaceSDK Web API
 *
 * Regula FaceSDK Web API
 *
 * The version of the OpenAPI document: 3.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.FaceSDK.WebClient.Client.OpenAPIDateConverter;

namespace Regula.FaceSDK.WebClient.Model
{
    /// <summary>
    /// If set, the portrait quality check is performed.
    /// </summary>
    [DataContract]
    public partial class QualityRequest :  IEquatable<QualityRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QualityRequest" /> class.
        /// </summary>
        /// <param name="backgroundMatchColor">backgroundMatchColor.</param>
        /// <param name="config">config.</param>
        public QualityRequest(List<int> backgroundMatchColor = default(List<int>), List<QualityConfig> config = default(List<QualityConfig>))
        {
            this.BackgroundMatchColor = backgroundMatchColor;
            this.Config = config;
        }
        
        /// <summary>
        /// Gets or Sets BackgroundMatchColor
        /// </summary>
        [DataMember(Name="backgroundMatchColor", EmitDefaultValue=false)]
        public List<int> BackgroundMatchColor { get; set; }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public List<QualityConfig> Config { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QualityRequest {\n");
            sb.Append("  BackgroundMatchColor: ").Append(BackgroundMatchColor).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QualityRequest);
        }

        /// <summary>
        /// Returns true if QualityRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of QualityRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QualityRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BackgroundMatchColor == input.BackgroundMatchColor ||
                    this.BackgroundMatchColor != null &&
                    input.BackgroundMatchColor != null &&
                    this.BackgroundMatchColor.SequenceEqual(input.BackgroundMatchColor)
                ) && 
                (
                    this.Config == input.Config ||
                    this.Config != null &&
                    input.Config != null &&
                    this.Config.SequenceEqual(input.Config)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BackgroundMatchColor != null)
                    hashCode = hashCode * 59 + this.BackgroundMatchColor.GetHashCode();
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
