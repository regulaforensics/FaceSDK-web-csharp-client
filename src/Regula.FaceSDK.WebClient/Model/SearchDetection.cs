/*
 * Regula Face SDK Web API
 *
 * <a href=\"https://regulaforensics.com/products/face-recognition-sdk/  \" target=\"_blank\">Regula Face SDK</a> is a cross-platform biometric verification solution for a digital identity verification process. The SDK enables convenient and reliable face capture on the client side (mobile, web, and desktop) and further processing on the client or server side.  The Face SDK includes the following features:  * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-detection\" target=\"_blank\">Face Detection</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-comparison-11\" target=\"_blank\">Face Match (1:1)</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-identification-1n\" target=\"_blank\">Face Search (1:N)</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#liveness-assessment\" target=\"_blank\">Liveness Assessment</a>  Here is the <a href=\"https://github.com/regulaforensics/FaceSDK-web-openapi  \" target=\"_blank\">OpenAPI specification on GitHub</a>.   ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.FaceSDK.WebClient.Client.OpenAPIDateConverter;

namespace Regula.FaceSDK.WebClient.Model
{
    /// <summary>
    /// The array of identified persons.
    /// </summary>
    [DataContract]
    public partial class SearchDetection :  IEquatable<SearchDetection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchDetection" /> class.
        /// </summary>
        /// <param name="code">Internal..</param>
        /// <param name="crop">Base64 of the aligned and cropped portrait..</param>
        /// <param name="detectorType">Internal..</param>
        /// <param name="hash">Internal..</param>
        /// <param name="idx">Internal..</param>
        /// <param name="image">Internal..</param>
        /// <param name="landmarks">Absolute coordinates (x,y) of five points of each detected face: left eye, right eye, nose, left point of lips, right point of lips..</param>
        /// <param name="landmarksType">Internal..</param>
        /// <param name="msg">Internal..</param>
        /// <param name="roi">The rectangular area of a detected face that is represented by a set of four elements: the X and Y coordinates of the top-left point, and the width and height dimensions of the rectangle..</param>
        /// <param name="versionSDK">versionSDK.</param>
        public SearchDetection(int code = default(int), string crop = default(string), int detectorType = default(int), string hash = default(string), int idx = default(int), string image = default(string), List<List<int>> landmarks = default(List<List<int>>), int landmarksType = default(int), string msg = default(string), List<decimal> roi = default(List<decimal>), string versionSDK = default(string))
        {
            this.Code = code;
            this.Crop = crop;
            this.DetectorType = detectorType;
            this.Hash = hash;
            this.Idx = idx;
            this.Image = image;
            this.Landmarks = landmarks;
            this.LandmarksType = landmarksType;
            this.Msg = msg;
            this.Roi = roi;
            this.VersionSDK = versionSDK;
        }

        /// <summary>
        /// Internal.
        /// </summary>
        /// <value>Internal.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public int Code { get; set; }

        /// <summary>
        /// Base64 of the aligned and cropped portrait.
        /// </summary>
        /// <value>Base64 of the aligned and cropped portrait.</value>
        [DataMember(Name="crop", EmitDefaultValue=false)]
        public string Crop { get; set; }

        /// <summary>
        /// Internal.
        /// </summary>
        /// <value>Internal.</value>
        [DataMember(Name="detectorType", EmitDefaultValue=false)]
        public int DetectorType { get; set; }

        /// <summary>
        /// Internal.
        /// </summary>
        /// <value>Internal.</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Internal.
        /// </summary>
        /// <value>Internal.</value>
        [DataMember(Name="idx", EmitDefaultValue=false)]
        public int Idx { get; set; }

        /// <summary>
        /// Internal.
        /// </summary>
        /// <value>Internal.</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Absolute coordinates (x,y) of five points of each detected face: left eye, right eye, nose, left point of lips, right point of lips.
        /// </summary>
        /// <value>Absolute coordinates (x,y) of five points of each detected face: left eye, right eye, nose, left point of lips, right point of lips.</value>
        [DataMember(Name="landmarks", EmitDefaultValue=false)]
        public List<List<int>> Landmarks { get; set; }

        /// <summary>
        /// Internal.
        /// </summary>
        /// <value>Internal.</value>
        [DataMember(Name="landmarksType", EmitDefaultValue=false)]
        public int LandmarksType { get; set; }

        /// <summary>
        /// Internal.
        /// </summary>
        /// <value>Internal.</value>
        [DataMember(Name="msg", EmitDefaultValue=false)]
        public string Msg { get; set; }

        /// <summary>
        /// The rectangular area of a detected face that is represented by a set of four elements: the X and Y coordinates of the top-left point, and the width and height dimensions of the rectangle.
        /// </summary>
        /// <value>The rectangular area of a detected face that is represented by a set of four elements: the X and Y coordinates of the top-left point, and the width and height dimensions of the rectangle.</value>
        [DataMember(Name="roi", EmitDefaultValue=false)]
        public List<decimal> Roi { get; set; }

        /// <summary>
        /// Gets or Sets VersionSDK
        /// </summary>
        [DataMember(Name="versionSDK", EmitDefaultValue=false)]
        public string VersionSDK { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchDetection {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Crop: ").Append(Crop).Append("\n");
            sb.Append("  DetectorType: ").Append(DetectorType).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Idx: ").Append(Idx).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Landmarks: ").Append(Landmarks).Append("\n");
            sb.Append("  LandmarksType: ").Append(LandmarksType).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  Roi: ").Append(Roi).Append("\n");
            sb.Append("  VersionSDK: ").Append(VersionSDK).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchDetection);
        }

        /// <summary>
        /// Returns true if SearchDetection instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchDetection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchDetection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Crop == input.Crop ||
                    (this.Crop != null &&
                    this.Crop.Equals(input.Crop))
                ) && 
                (
                    this.DetectorType == input.DetectorType ||
                    (this.DetectorType != null &&
                    this.DetectorType.Equals(input.DetectorType))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Idx == input.Idx ||
                    (this.Idx != null &&
                    this.Idx.Equals(input.Idx))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Landmarks == input.Landmarks ||
                    this.Landmarks != null &&
                    input.Landmarks != null &&
                    this.Landmarks.SequenceEqual(input.Landmarks)
                ) && 
                (
                    this.LandmarksType == input.LandmarksType ||
                    (this.LandmarksType != null &&
                    this.LandmarksType.Equals(input.LandmarksType))
                ) && 
                (
                    this.Msg == input.Msg ||
                    (this.Msg != null &&
                    this.Msg.Equals(input.Msg))
                ) && 
                (
                    this.Roi == input.Roi ||
                    this.Roi != null &&
                    input.Roi != null &&
                    this.Roi.SequenceEqual(input.Roi)
                ) && 
                (
                    this.VersionSDK == input.VersionSDK ||
                    (this.VersionSDK != null &&
                    this.VersionSDK.Equals(input.VersionSDK))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Crop != null)
                    hashCode = hashCode * 59 + this.Crop.GetHashCode();
                if (this.DetectorType != null)
                    hashCode = hashCode * 59 + this.DetectorType.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Idx != null)
                    hashCode = hashCode * 59 + this.Idx.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Landmarks != null)
                    hashCode = hashCode * 59 + this.Landmarks.GetHashCode();
                if (this.LandmarksType != null)
                    hashCode = hashCode * 59 + this.LandmarksType.GetHashCode();
                if (this.Msg != null)
                    hashCode = hashCode * 59 + this.Msg.GetHashCode();
                if (this.Roi != null)
                    hashCode = hashCode * 59 + this.Roi.GetHashCode();
                if (this.VersionSDK != null)
                    hashCode = hashCode * 59 + this.VersionSDK.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
