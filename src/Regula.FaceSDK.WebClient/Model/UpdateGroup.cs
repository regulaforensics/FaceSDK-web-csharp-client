/* 
 * Regula FaceSDK Web API
 *
 * Regula FaceSDK Web API
 *
 * The version of the OpenAPI document: 3.2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Regula.FaceSDK.WebClient.Client.OpenAPIDateConverter;

namespace Regula.FaceSDK.WebClient.Model
{
    /// <summary>
    /// UpdateGroup
    /// </summary>
    [DataContract]
    public partial class UpdateGroup :  IEquatable<UpdateGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateGroup" /> class.
        /// </summary>
        /// <param name="addItems">addItems.</param>
        /// <param name="removeItems">removeItems.</param>
        public UpdateGroup(List<decimal> addItems = default(List<decimal>), List<decimal> removeItems = default(List<decimal>))
        {
            this.AddItems = addItems;
            this.RemoveItems = removeItems;
        }
        
        /// <summary>
        /// Gets or Sets AddItems
        /// </summary>
        [DataMember(Name="addItems", EmitDefaultValue=false)]
        public List<decimal> AddItems { get; set; }

        /// <summary>
        /// Gets or Sets RemoveItems
        /// </summary>
        [DataMember(Name="removeItems", EmitDefaultValue=false)]
        public List<decimal> RemoveItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateGroup {\n");
            sb.Append("  AddItems: ").Append(AddItems).Append("\n");
            sb.Append("  RemoveItems: ").Append(RemoveItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateGroup);
        }

        /// <summary>
        /// Returns true if UpdateGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddItems == input.AddItems ||
                    this.AddItems != null &&
                    input.AddItems != null &&
                    this.AddItems.SequenceEqual(input.AddItems)
                ) && 
                (
                    this.RemoveItems == input.RemoveItems ||
                    this.RemoveItems != null &&
                    input.RemoveItems != null &&
                    this.RemoveItems.SequenceEqual(input.RemoveItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddItems != null)
                    hashCode = hashCode * 59 + this.AddItems.GetHashCode();
                if (this.RemoveItems != null)
                    hashCode = hashCode * 59 + this.RemoveItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
